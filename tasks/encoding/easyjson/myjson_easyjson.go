// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package myjson

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1a3d1914DecodeTasksOsEasyjson(in *jlexer.Lexer, out *CurrencyAmount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			out.Amount = int64(in.Int64())
		case "decimals":
			out.Decimals = int8(in.Int8())
		case "symbol":
			out.Symbol = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a3d1914EncodeTasksOsEasyjson(out *jwriter.Writer, in CurrencyAmount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"decimals\":"
		out.RawString(prefix)
		out.Int8(int8(in.Decimals))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CurrencyAmount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a3d1914EncodeTasksOsEasyjson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CurrencyAmount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a3d1914EncodeTasksOsEasyjson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CurrencyAmount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a3d1914DecodeTasksOsEasyjson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CurrencyAmount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a3d1914DecodeTasksOsEasyjson(l, v)
}
func easyjson1a3d1914DecodeTasksOsEasyjson1(in *jlexer.Lexer, out *AccountBalance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id_hash":
			if in.IsNull() {
				in.Skip()
				out.AccountIdHash = nil
			} else {
				out.AccountIdHash = in.Bytes()
			}
		case "amounts":
			if in.IsNull() {
				in.Skip()
				out.Amounts = nil
			} else {
				in.Delim('[')
				if out.Amounts == nil {
					if !in.IsDelim(']') {
						out.Amounts = make([]CurrencyAmount, 0, 2)
					} else {
						out.Amounts = []CurrencyAmount{}
					}
				} else {
					out.Amounts = (out.Amounts)[:0]
				}
				for !in.IsDelim(']') {
					var v2 CurrencyAmount
					(v2).UnmarshalEasyJSON(in)
					out.Amounts = append(out.Amounts, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_blocked":
			out.IsBlocked = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a3d1914EncodeTasksOsEasyjson1(out *jwriter.Writer, in AccountBalance) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"account_id_hash\":"
		out.RawString(prefix[1:])
		out.Base64Bytes(in.AccountIdHash)
	}
	if len(in.Amounts) != 0 {
		const prefix string = ",\"amounts\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.Amounts {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"is_blocked\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBlocked))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountBalance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a3d1914EncodeTasksOsEasyjson1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountBalance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a3d1914EncodeTasksOsEasyjson1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountBalance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a3d1914DecodeTasksOsEasyjson1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountBalance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a3d1914DecodeTasksOsEasyjson1(l, v)
}
